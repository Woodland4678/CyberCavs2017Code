// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.CyberCavs2017Code;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc4678.CyberCavs2017Code.commands.*;
import org.usfirst.frc4678.CyberCavs2017Code.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	
	public static double intakePickupPosition() {
		Preferences prefs = Preferences.getInstance();
		if (!prefs.containsKey("intakePickupPosition")) {
			prefs.putInt("intakePickupPosition", 1000);
		}
		return prefs.getInt("intakePickupPosition", 1000);
	}
	public static double lowGoalFlapOpenPosition() {
		Preferences prefs = Preferences.getInstance();
		if (!prefs.containsKey("lowGoalFlapOpenPosition")) {
			prefs.putInt("lowGoalFlapOpenPosition", 300);
		}
		return prefs.getInt("lowGoalFlapOpenPosition", 300);
	}

	public static double lowGoalFlapClosePosition() {
		Preferences prefs = Preferences.getInstance();
		if (!prefs.containsKey("lowGoalFlapClosePosition")) {
			prefs.putInt("lowGoalFlapClosePosition", 0);
		}
		return prefs.getInt("lowGoalFlapClosePosition", 0);
	}
	public static double windmillDeployAngle() {
		Preferences prefs = Preferences.getInstance();
		if (!prefs.containsKey("windmillDeployAngle")) {
			prefs.putInt("windmillDeployAngle", 300);
		}
		return prefs.getInt("windmillDeployAngle", 300);
	}
	public static double windmillRetractAngle() {
		Preferences prefs = Preferences.getInstance();
		if (!prefs.containsKey("windmillRetractAngle")) {
			prefs.putInt("windmillRetractAngle", 0);
		}
		return prefs.getInt("windmillRetractAngle", 0);
	}
	public static double flyWheelSpeed() {
		Preferences prefs = Preferences.getInstance();
		if (!prefs.containsKey("flyWheelSpeed")) {
			prefs.putInt("flyWheelSpeed", 25000);
		}
		return prefs.getInt("flyWheelSpeed", 25000);
	}
	public static double frontFlapExtend() {
		Preferences prefs = Preferences.getInstance();
		if (!prefs.containsKey("frontFlapExtend")) {
			prefs.putInt("frontFlapExtend", 300);
		}
		return prefs.getInt("frontFlapExtend", 300);
	}
	public static double frontFlapRetract() {
		Preferences prefs = Preferences.getInstance();
		if (!prefs.containsKey("frontFlapRetract")) {
			prefs.putInt("frontFlapRetract", 0);
		}
		return prefs.getInt("frontFlapRetract", 0);
	}
	public static double backFlapExtend() {
		Preferences prefs = Preferences.getInstance();
		if (!prefs.containsKey("backFlapExtend")) {
			prefs.putInt("backFlapExtend", 300);
		}
		return prefs.getInt("backFlapExtend", 300);
	}
	public static double backFlapRetract() {
		Preferences prefs = Preferences.getInstance();
		if (!prefs.containsKey("backFlapRetract")) {
			prefs.putInt("backFlapRetract", 0);
		}
		return prefs.getInt("backFlapRetract", 0);
	}
    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Intake intake;
    public static Claw claw;
    public static Climber climber;
    public static Shooter shooter;
    public static Hopper hopper;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        intake = new Intake();
        claw = new Claw();
        climber = new Climber();
        shooter = new Shooter();
        hopper = new Hopper();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
