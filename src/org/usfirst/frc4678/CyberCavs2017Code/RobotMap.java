// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.CyberCavs2017Code;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainleftMotor;
    public static SpeedController driveTrainrightMotor;
    public static Encoder driveTrainleftPosition;
    public static Encoder driveTrainrightPosition;
    public static Solenoid driveTrainshifter;
    public static Servo intakelowGoalFlap;
    public static SpeedController intakeintakeMotor;
    public static CANTalon intakeintakePosition;
    public static Servo intakeleftFuelWindmillDeployMotor;
    public static Servo intakerightFuelWindmillDeployMotor;
    public static SpeedController intakeleftFuelWindmillSpinMotor;
    public static SpeedController intakerightFuelWindmillSpinMotor;
    public static CANTalon clawclawPosition;
    public static Solenoid clawclamp;
    public static AnalogInput clawleftFingerPosition;
    public static AnalogInput clawrightFingerPosition;
    public static SpeedController climberclimberMotor;
    public static CANTalon shootershooterMotor;
    public static CANTalon shooterindexMotor;
    public static Relay hopperleftAgitator;
    public static Relay hopperrightAgitator;
    public static Servo hopperfrontFlap;
    public static Servo hopperbackFlap;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainleftMotor = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "leftMotor", (Talon) driveTrainleftMotor);
        
        driveTrainrightMotor = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "rightMotor", (Talon) driveTrainrightMotor);
        
        driveTrainleftPosition = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "leftPosition", driveTrainleftPosition);
        driveTrainleftPosition.setDistancePerPulse(1.0);
        driveTrainleftPosition.setPIDSourceType(PIDSourceType.kRate);
        driveTrainrightPosition = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "rightPosition", driveTrainrightPosition);
        driveTrainrightPosition.setDistancePerPulse(1.0);
        driveTrainrightPosition.setPIDSourceType(PIDSourceType.kRate);
        driveTrainshifter = new Solenoid(0, 0);
        LiveWindow.addActuator("DriveTrain", "shifter", driveTrainshifter);
        
        intakelowGoalFlap = new Servo(4);
        LiveWindow.addActuator("Intake", "lowGoalFlap", intakelowGoalFlap);
        
        intakeintakeMotor = new Talon(2);
        LiveWindow.addActuator("Intake", "intakeMotor", (Talon) intakeintakeMotor);
        
        intakeintakePosition = new CANTalon(0);
        LiveWindow.addActuator("Intake", "intakePosition", intakeintakePosition);
        
        intakeleftFuelWindmillDeployMotor = new Servo(3);
        LiveWindow.addActuator("Intake", "leftFuelWindmillDeployMotor", intakeleftFuelWindmillDeployMotor);
        
        intakerightFuelWindmillDeployMotor = new Servo(8);
        LiveWindow.addActuator("Intake", "rightFuelWindmillDeployMotor", intakerightFuelWindmillDeployMotor);
        
        intakeleftFuelWindmillSpinMotor = new Talon(11);
        LiveWindow.addActuator("Intake", "leftFuelWindmillSpinMotor", (Talon) intakeleftFuelWindmillSpinMotor);
        
        intakerightFuelWindmillSpinMotor = new Talon(12);
        LiveWindow.addActuator("Intake", "rightFuelWindmillSpinMotor", (Talon) intakerightFuelWindmillSpinMotor);
        
        clawclawPosition = new CANTalon(1);
        LiveWindow.addActuator("Claw", "clawPosition", clawclawPosition);
        
        clawclamp = new Solenoid(0, 1);
        LiveWindow.addActuator("Claw", "clamp", clawclamp);
        
        clawleftFingerPosition = new AnalogInput(0);
        LiveWindow.addSensor("Claw", "leftFingerPosition", clawleftFingerPosition);
        
        clawrightFingerPosition = new AnalogInput(1);
        LiveWindow.addSensor("Claw", "rightFingerPosition", clawrightFingerPosition);
        
        climberclimberMotor = new Talon(5);
        LiveWindow.addActuator("Climber", "climberMotor", (Talon) climberclimberMotor);
        
        shootershooterMotor = new CANTalon(3);
        LiveWindow.addActuator("Shooter", "shooterMotor", shootershooterMotor);
        
        shooterindexMotor = new CANTalon(2);
        LiveWindow.addActuator("Shooter", "indexMotor", shooterindexMotor);
        
        hopperleftAgitator = new Relay(0);
        LiveWindow.addActuator("Hopper", "leftAgitator", hopperleftAgitator);
        
        hopperrightAgitator = new Relay(1);
        LiveWindow.addActuator("Hopper", "rightAgitator", hopperrightAgitator);
        
        hopperfrontFlap = new Servo(6);
        LiveWindow.addActuator("Hopper", "frontFlap", hopperfrontFlap);
        
        hopperbackFlap = new Servo(7);
        LiveWindow.addActuator("Hopper", "backFlap", hopperbackFlap);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
