// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.CyberCavs2017Code.subsystems;

import org.usfirst.frc4678.CyberCavs2017Code.RobotMap;
import org.usfirst.frc4678.CyberCavs2017Code.commands.*;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftMotor = RobotMap.driveTrainleftMotor;
    private final SpeedController rightMotor = RobotMap.driveTrainrightMotor;
    private final Encoder leftPosition = RobotMap.driveTrainleftPosition;
    private final Encoder rightPosition = RobotMap.driveTrainrightPosition;
    private final Solenoid shifter = RobotMap.driveTrainshifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new RobotDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void setLeftMotor(double power){
    	leftMotor.set(-power);
    }
    public void setRightMotor(double power){
    	rightMotor.set(power);
    }
    public void shiftUp(){
    	shifter.set(true);
    }
    public void shiftDown(){
    	shifter.set(false);
    }
    public int getLeftEncoder(){
    	return leftPosition.get();
    }
    public int getRightEncoder(){
    	return rightPosition.get();
    }
}


