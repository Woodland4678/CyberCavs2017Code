// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.CyberCavs2017Code.subsystems;

import org.usfirst.frc4678.CyberCavs2017Code.RobotMap;
import org.usfirst.frc4678.CyberCavs2017Code.commands.*;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Servo;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Hopper extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Relay leftAgitator = RobotMap.hopperleftAgitator;
    private final Relay rightAgitator = RobotMap.hopperrightAgitator;
    private final Servo frontFlap = RobotMap.hopperfrontFlap;
    private final Servo backFlap = RobotMap.hopperbackFlap;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void setFrontFlap (double angle){
    	frontFlap.setAngle(angle);    	
    }
    public void setBackFlap (double angle){
    	backFlap.setAngle(angle);
    }
    public void setLeftAgitator (String direction){
    	if (direction == "forward"){
    		leftAgitator.set(Relay.Value.kForward);
    	}
    	else if (direction =="reverse"){
    		leftAgitator.set(Relay.Value.kReverse);
    	}
    	else{
    		leftAgitator.set(Relay.Value.kOff);
    	}
    }
    public void setRightAgitator (String direction){
    	if (direction == "forward"){
    		rightAgitator.set(Relay.Value.kForward);
    	}
    	else if (direction =="reverse"){
    		rightAgitator.set(Relay.Value.kReverse);
    	}
    	else{
    		rightAgitator.set(Relay.Value.kOff);
    	}
    }

}

